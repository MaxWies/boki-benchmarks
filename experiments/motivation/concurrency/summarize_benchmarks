#!/usr/bin/python3
from datetime import datetime, time
from operator import itemgetter
import os
import sys
import json
import argparse
import subprocess as sp
import matplotlib.pyplot as plt
import matplotlib.offsetbox as offsetbox
import numpy as np
import math
import pandas as pd
import csv


def slog_info(slog):
    if slog == 'boki-local-local':
        return 'of a local Boki node in local setting'
    elif slog == 'boki-hybrid-hybrid':
        return 'of a hybrid Boki node in hybrid setting'
    elif slog == 'boki-remote-local':
        return 'of a local Boki node in remote setting'
    elif slog == 'boki-hybrid-local':
        return 'of a local Boki node in hybrid setting'
    else:
        return 'unsupported'

def discard_csv_files(directory, ts_end):
    csv_file_names = [file for file in os.listdir(directory) if file.endswith('.csv')]
    csv_files_to_discard = []
    for csv_file_name in csv_file_names:
        chunks = csv_file_name.split('.')[0].split('-')
        ts = int(chunks[3])
        if ts_end < ts:
            csv_files_to_discard.append(os.path.join(directory, csv_file_name))
    for csv_file in csv_files_to_discard:
        os.remove(csv_file)


def count_csv_entries(csv_files):
    return pd.concat([pd.read_csv(file) for file in csv_files]).shape[0]

def count_csv_entries_in_directory(directory, filter):
    csv_files = [file for file in os.listdir(directory) if file.endswith('.csv') and filter in file]
    csv_entries = 0
    for file in csv_files:
        with open(os.path.join(directory, file)) as f:
            for line in f:
                csv_entries += 1
    return csv_entries

def compute_throughput(directory, filter, exp_duration):
    print(round(count_csv_entries_in_directory(directory, filter) / exp_duration / 1000, 2))

def concatenate_csv_files(directory, filter, result_file):
    csv_files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.csv') and filter in file]
    with open(result_file, 'w') as f:
        for csv_file in csv_files:
            with open(csv_file) as f_in:
                for line in f_in:
                    f.write(line)

def compute_csv_percentile(csv_file, column_ix, percentile):
    return pd.read_csv(csv_file).iloc[:, column_ix].quantile(q=percentile)

def add_concurrency_throughput_latency_row(directory, slog, concurrency, throughput, result_file):
    write_header = not os.path.exists(result_file)
    with open(result_file, 'a', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(['slog', 'concurrency', 'throughput', 'latency_append_50','latency_append_99', 'latency_read_50','latency_read_99'])
        data = [
            slog,
            concurrency,
            throughput,
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-append.csv".format(slog)), 0, 0.5)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-append.csv".format(slog)), 0, 0.99)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-read.csv".format(slog)), 0, 0.5)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-read.csv".format(slog)), 0, 0.99))
        ]
        writer.writerow(data)

def generate_concurrency_vs_latency_plot(csv_file, slog, display_title, result_file):
    df = pd.read_csv(csv_file)
    df_boki = df.loc[df['slog'] == slog]

    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()

    p1, = ax1.plot(df_boki['concurrency'], df_boki['latency_append_50'], label='Append 0.5', color='blue', linestyle=':', marker='o', linewidth='2')
    p2, = ax1.plot(df_boki['concurrency'], df_boki['latency_append_99'], label='Append 0.99', color='blue', linestyle='--', marker='o', linewidth='2')
    p3, = ax1.plot(df_boki['concurrency'], df_boki['latency_read_50'], label='Read 0.5', color='green', linestyle=':', marker='v', linewidth='2')
    p4, = ax1.plot(df_boki['concurrency'], df_boki['latency_read_99'], label='Read 0.99', color='green', linestyle='--', marker='v', linewidth='2')

    p5, = ax2.plot(df_boki['concurrency'], df_boki['throughput'], label='Throughput', color='darkorange', linestyle='-')

    ax1.set_xlabel('Concurrency (# GO Routines)', fontsize=12)
    ax1.set_ylabel('Latency (\u03BCs)', fontsize=12)
    ax2.set_ylabel('Throughput (kOp/s)', fontsize=12)

    if df_boki['latency_append_99'].max() < 12000 and df_boki['latency_read_99'].max() < 12000:
        ax1.set_ylim(bottom=-200, top=12000)
    else:
        ax1.set_ylim(bottom=-200)
    ax2.set_ylim(bottom=0, top=110)

    # ax1.legend(loc='upper center', bbox_to_anchor=(0.5, 1.12),
    #       ncol=6, fancybox=True, shadow=True, handles=[p1, p2, p3, p4, p5],
    #       prop={'size':6})

    ax1.grid(which='both')
    ax1.legend(handles=[p1, p2, p3, p4, p5])
    if display_title:
        plt.title('Latency and throughput {}'.format(slog_info(slog)))
    plt.savefig(result_file, bbox_inches='tight')
    plt.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--directory', type=str)
    parser.add_argument('--file', type=str)
    parser.add_argument('--slog', type=str)
    parser.add_argument('--exp-duration', type=int)
    parser.add_argument('--interval', type=int)
    parser.add_argument('--filter', type=str, default='')
    parser.add_argument('--ts-end', type=int)
    parser.add_argument('--concurrency', type=int)
    parser.add_argument('--throughput', type=float)
    parser.add_argument('--result-file', type=str)
    parser.add_argument('--result-directory', type=str)
    parser.add_argument('--display-title', type=str, default='')
    args = parser.parse_args()
    try:
        if args.cmd == 'compute-throughput':
            compute_throughput(args.directory, args.filter, args.exp_duration)
        elif args.cmd == 'concatenate-csv':
            concatenate_csv_files(args.directory, args.filter, args.result_file)
        elif args.cmd == 'discard-csv-files':
            discard_csv_files(args.directory, args.ts_end)
        elif args.cmd == 'add-row':
            add_concurrency_throughput_latency_row(args.directory, args.slog, args.concurrency, args.throughput, args.result_file)
        elif args.cmd == 'generate-plot':
            display_title = False
            if args.display_title != '':
                display_title = True
            generate_concurrency_vs_latency_plot(args.file, args.slog, display_title, args.result_file)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)