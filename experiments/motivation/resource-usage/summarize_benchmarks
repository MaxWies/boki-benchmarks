#!/usr/bin/python3
from datetime import datetime, time
from operator import itemgetter
import os
import sys
import json
import argparse
import subprocess as sp
import matplotlib.pyplot as plt
import matplotlib.offsetbox as offsetbox
import numpy as np
import math
import pandas as pd
import csv


def add_row(slog, component, concurrency, cpu_avg, bandwidth_file, result_file):
    df_bandwidth = pd.read_csv(bandwidth_file)
    mb_per_second_sent = df_bandwidth['mb_per_second_sent'].iloc[0]
    mb_per_second_received = df_bandwidth['mb_per_second_received'].iloc[0]
    write_header = not os.path.exists(result_file)
    with open(result_file, 'a', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(['slog', 'component', 'concurrency', 'cpu_avg', 'mb_per_second_sent', 'mb_per_second_received'])
        data = [
            slog,
            component,
            concurrency,
            round(cpu_avg,2),
            mb_per_second_sent,
            mb_per_second_received
        ]
        writer.writerow(data)


def generate_plot_concurrency_vs_bandwidth(csv_file, component, result_file):
    df = pd.read_csv(csv_file)
    df_component = df.loc[df['component'] == component]
    df_component_boki_local = df_component.loc[df_component['slog'] == 'boki-local']

    fig, ax1 = plt.subplots()
    ax2 = ax1.twinx()

    p1, = ax1.plot(df_component_boki_local['concurrency'], df_component_boki_local['mb_per_second_sent'], 'o-', color='blue', label='Bandwidth Sent')
    p2, = ax2.plot(df_component_boki_local['concurrency'], df_component_boki_local['mb_per_second_received'], 'o-', color='darkred', label='Bandwidth Received')

    ax1.set_xlabel('Concurrency (# Go Routines)')
    ax1.set_ylabel('Bandwidth (Mb/s)')
    ax2.set_ylabel('Bandwidth (Mb/s)')

    ax1.set_xlim(left=0)
    ax1.set_ylim(bottom=0)
    ax2.set_ylim(bottom=0)

    ax1.yaxis.label.set_color(p1.get_color())
    ax2.yaxis.label.set_color(p2.get_color())

    ax1.legend(handles=[p1, p2])

    plt.title('Bandwidth use of local Boki {} node'.format(component))
    plt.savefig(result_file)
    plt.close

def generate_plot_concurrency_vs_cpu(csv_file, component, result_file):
    df = pd.read_csv(csv_file)
    df_component = df.loc[df['component'] == component]

    df_component_boki_local = df_component.loc[df_component['slog'] == 'boki-local']
    df_component_boki_remote = df_component.loc[df_component['slog'] == 'boki-remote']
    df_component_boki_hybrid = df_component.loc[df_component['slog'] == 'boki-hybrid']

    plt.plot(df_component_boki_local['concurrency'], df_component_boki_local['cpu_avg'], 'o-', color='royalblue', label='Function communication + local index requests')
    plt.plot(df_component_boki_remote['concurrency'], df_component_boki_remote['cpu_avg'], 'x-', color='darkviolet', label='No function communication + remote index requests')
    plt.plot(df_component_boki_hybrid['concurrency'], df_component_boki_hybrid['cpu_avg'], 'v-', color='slategrey', label='Function communication + local and remote index requests')
    
    plt.xlabel('Concurrency (# Go Routines)')
    plt.ylabel('CPU (%)')

    plt.xlim(left=0)
    plt.ylim(bottom=0)

    plt.legend(prop={'size':7})

    plt.title('CPU use of Boki {} node'.format(component))
    plt.savefig(result_file)
    plt.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--file', type=str)
    parser.add_argument('--slog', type=str)
    parser.add_argument('--concurrency', type=int)
    parser.add_argument('--component', type=str)
    parser.add_argument('--cpu-avg', type=float)
    parser.add_argument('--bandwidth-file', type=str)
    parser.add_argument('--result-file', type=str)
    args = parser.parse_args()
    try:
        if args.cmd == 'add-row':
            add_row(args.slog, args.component, args.concurrency, args.cpu_avg, args.bandwidth_file, args.result_file)
        elif args.cmd == 'generate-plot-concurrency-vs-cpu':
            generate_plot_concurrency_vs_cpu(args.file, args.component, args.result_file)
        elif args.cmd == 'generate-plot-concurrency-vs-bandwidth':
            generate_plot_concurrency_vs_bandwidth(args.file, args.component, args.result_file)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)