#!/usr/bin/python3
from datetime import datetime, time
import os
import sys
import json
import argparse
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import numpy as np
import math
import pandas as pd
import csv

def merge_csv(directory, filter, slog, result_file):
    csv_files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.csv') and filter in file]
    data = [0] * 7 # convention
    for csv_file in csv_files:
        with open(csv_file, newline='') as f:
            records_row = next(csv.reader(f))
            for i in range(len(data)):
                data[i] += int(records_row[i])

    write_header = not os.path.exists(result_file)
    with open(result_file, 'a', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow([
                'slog',
                'append_ops', 'read_ops', 
                'local_index_hits', 'local_index_misses',
                'index_min_read_ops',
                'log_cache_hits', 'log_cache_misses'
            ])
        writer.writerow(
            [slog] + data
        )

def generate_plot(op_stat_csv_file, client_csv_file, result_file):
    op_stat_header_row = None
    op_stat_data_row = None
    with open(op_stat_csv_file, newline='') as f:
        reader = csv.reader(f)
        op_stat_header_row = next(reader)
        op_stat_data_row = next(reader)

    slog = op_stat_data_row[0]

    # remove name and config-name
    op_stat_header_row = op_stat_header_row[1:]
    op_stat_data_row = op_stat_data_row[1:]

    for i in range(len(op_stat_data_row)):
        op_stat_data_row[i] = int(op_stat_data_row[i])

    fig, ax = plt.subplots(1,1)

    color = 'g'
    if 'boki-local' in slog.lower():
        color = 'royalblue'
    if 'boki-remote' in slog.lower():
        color = 'darkviolet'

    bars = ax.bar(range(len(op_stat_data_row)), op_stat_data_row, color=color)
    for bars in ax.containers:
        ax.bar_label(bars, fontsize=8)
    ax.grid(color='#95a5a6', linestyle='--', linewidth=1, axis='y', alpha=0.7)
    scale_y = 1e3
    ticks_y = ticker.FuncFormatter(lambda x, pos: '{0:g}'.format(x/scale_y))
    ax.yaxis.set_major_formatter(ticks_y)
    ax.set_ylabel('Counts in Thousands')
    ind = np.arange(len(op_stat_header_row))
    ax.set_xticks(ind, labels=op_stat_header_row, fontsize=6, rotation=15)

    local_index_hit_ratio = round(int(op_stat_data_row[2]) / int(op_stat_data_row[1]), 2)
    log_cache_hit_ratio = round(int(op_stat_data_row[4]) / int(op_stat_data_row[1]), 2)

    info_text = '\n'.join((
        r'Local Index Hit Ratio: {}'.format(str(local_index_hit_ratio)),
        r'Log Cache Hit Ratio: {}'.format(str(log_cache_hit_ratio))
    ))
    ax.text(
        0.80, 1.15, info_text,
        transform=ax.transAxes, verticalalignment='top', size=8,
        bbox=dict(
            boxstyle='round', facecolor='wheat', alpha=0.5
        )
    )

    plt.subplots_adjust(bottom=0.4)

    df = pd.read_csv(client_csv_file)
    row_labels = df.iloc[:, 0].tolist()
    for i in range(len(row_labels)):
        row_labels[i] = row_labels[i].replace('Retwis','')
    cellText = []
    for index, row in df.iterrows():
        value = []
        for c in ['throughput', 'latency_50', 'latency_99','transaction_fail_ratio','request_fail_ratio']:
            value.append(float(row[c]))
        cellText.append(value)

    table = plt.table(
        cellText=cellText,
        rowLabels=row_labels,
        colLabels=[
            'Throughput Op/s',
            'Latency (50%) ms',
            'Latency (99%) ms',
            'Transaction Conflicts Ratio',
            'Failed Requests Ratio',
        ],
        loc='bottom',
        bbox=[0.03, -0.65, 1.12, 0.4]
    )

    table.set_fontsize(12)
    table.scale(1.5, 1.5)

    plt.savefig(result_file)
    plt.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--directory', type=str)
    parser.add_argument('--slog', type=str)
    parser.add_argument('--filter', type=str)
    parser.add_argument('--op-stats-csv-file', type=str)
    parser.add_argument('--client-csv-file', type=str)
    parser.add_argument('--result-file', type=str)
    args = parser.parse_args()
    try:
        if args.cmd == 'merge-csv':
            merge_csv(args.directory, args.filter, args.slog, args.result_file)
        elif args.cmd == 'generate-plot':
            generate_plot(args.op_stats_csv_file, args.client_csv_file, args.result_file)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)