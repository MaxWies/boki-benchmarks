#!/usr/bin/python3
from datetime import datetime, time
from operator import itemgetter
import os
import sys
import json
import argparse
import subprocess as sp
import matplotlib.pyplot as plt
import matplotlib.offsetbox as offsetbox
import numpy as np
import math
import pandas as pd
import csv

def count_csv_entries(csv_files):
    return pd.concat([pd.read_csv(file) for file in csv_files]).shape[0]

def count_csv_entries_in_directory(directory, filter):
    csv_files = [file for file in os.listdir(directory) if file.endswith('.csv') and filter in file]
    return pd.concat([pd.read_csv(os.path.join(directory, file)) for file in csv_files]).shape[0]

def compute_throughput(directory, filter, exp_duration):
    print(round(count_csv_entries_in_directory(directory, filter) / exp_duration / 1000, 2))

def concatenate_csv_files(directory, filter, result_file):
    csv_files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.csv') and filter in file]
    with open(result_file, 'w') as f:
        for csv_file in csv_files:
            with open(csv_file) as f_in:
                for line in f_in:
                    f.write(line)

def compute_csv_percentile(csv_file, column_ix, percentile):
    return pd.read_csv(csv_file).iloc[:, column_ix].quantile(q=percentile)

def add_throughput_latency_row(directory, slog, throughput, throughput_append, throughput_read, result_file):
    write_header = not os.path.exists(result_file)
    with open(result_file, 'a', encoding='UTF8', newline='') as f:
        writer = csv.writer(f)
        if write_header:
            writer.writerow(['slog', 'throughput', 'throughput_append', 'throughput_read', 'latency_append_50','latency_append_99', 'latency_read_50','latency_read_99'])
        data = [
            slog,
            throughput,
            throughput_append,
            throughput_read,
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-append.csv".format(slog)), 0, 0.5)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-append.csv".format(slog)), 0, 0.99)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-read.csv".format(slog)), 0, 0.5)),
            int(compute_csv_percentile(os.path.join(directory, "all-latencies-read.csv".format(slog)), 0, 0.99))
        ]
        writer.writerow(data)


def generate_throughput_vs_latency_plot__boki_vs_indilog__append(csv_file, result_file):
    df = pd.read_csv(csv_file)
    df_boki = df.loc[df['slog'] == 'boki-local']
    df_indilog = df.loc[df['slog'] == 'indilog']

    fig = plt.figure()
    ax = plt.subplot(111)

    df_boki.plot.line(x='throughput', y='latency_append_50', label='Boki Append 0.5', color='royalblue', style='o--', ax=ax)
    df_boki.plot.line(x='throughput', y='latency_append_99', label='Boki Append 0.99', color='royalblue', style='o-', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_append_50', label='Indilog Append 0.5', color='darkgreen', style='o--', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_append_99', label='Indilog Append 0.99', color='darkgreen', style='o-', ax=ax)

    plt.xlim(left=0)
    plt.ylim(bottom=0)

    plt.xlabel('Throughput (kOp/s)', fontsize=14)
    plt.ylabel('Latency (\u03BCs)', fontsize=14)

    plt.savefig(result_file, bbox_inches='tight')
    plt.close

def generate_throughput_vs_latency_plot__indilog_vs_indilog_min_seqnum_completion__append(csv_file, result_file):
    df = pd.read_csv(csv_file)
    df_indilog = df.loc[df['slog'] == 'indilog']
    df_inidlog_min_seqnum_completion = df.loc[df['slog'] == 'indilog-min-seqnum-completion']

    fig = plt.figure()
    ax = plt.subplot(111)

    df_indilog.plot.line(x='throughput', y='latency_append_50', label='Indilog Append 0.5', color='darkgreen', style='o--', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_append_99', label='Indilog Append 0.99', color='darkgreen', style='o-', ax=ax)
    df_inidlog_min_seqnum_completion.plot.line(x='throughput', y='latency_append_50', label='Indilog-Extended Append 0.5', color='darkorange', style='o--', ax=ax)
    df_inidlog_min_seqnum_completion.plot.line(x='throughput', y='latency_append_99', label='Indilog-Extended Append 0.99', color='darkorange', style='o-', ax=ax)

    plt.xlim(left=0, right=410)
    plt.ylim(bottom=0)

    plt.xlabel('Throughput (kOp/s)', fontsize=14)
    plt.ylabel('Latency (\u03BCs)', fontsize=14)

    plt.savefig(result_file, bbox_inches='tight')
    plt.close

def generate_throughput_vs_latency_plot__boki_vs_indilog__read(csv_file, result_file):
    df = pd.read_csv(csv_file)
    df_boki = df.loc[df['slog'] == 'boki-local']
    df_indilog = df.loc[df['slog'] == 'indilog']

    fig = plt.figure()
    ax = plt.subplot(111)

    df_boki.plot.line(x='throughput', y='latency_read_50', label='Boki Read 0.5', color='royalblue', style='o--', ax=ax)
    df_boki.plot.line(x='throughput', y='latency_read_99', label='Boki Read 0.99', color='royalblue', style='o-', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_read_50', label='Indilog Read 0.5', color='darkgreen', style='o--', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_read_99', label='Indilog Read 0.99', color='darkgreen', style='o-', ax=ax)

    plt.xlim(left=0)
    plt.ylim(bottom=0)

    plt.xlabel('Throughput (kOp/s)', fontsize=14)
    plt.ylabel('Latency (\u03BCs)', fontsize=14)

    plt.savefig(result_file, bbox_inches='tight')
    plt.close

def generate_throughput_vs_latency_plot__indilog_vs_indilog_min_seqnum_completion__read(csv_file, result_file):
    df = pd.read_csv(csv_file)
    df_indilog = df.loc[df['slog'] == 'indilog']
    df_indilog_min_seqnum_completion = df.loc[df['slog'] == 'indilog-min-seqnum-completion']

    fig = plt.figure()
    ax = plt.subplot(111)

    df_indilog.plot.line(x='throughput', y='latency_read_50', label='Indilog Read 0.5', color='darkgreen', style='o--', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_read_99', label='Indilog Read 0.99', color='darkgreen', style='o-', ax=ax)
    df_indilog_min_seqnum_completion.plot.line(x='throughput', y='latency_read_50', label='Indilog-Extended Read 0.5', color='darkorange', style='o--', ax=ax)
    df_indilog_min_seqnum_completion.plot.line(x='throughput', y='latency_read_99', label='Indilog-Extended Read 0.99', color='darkorange', style='o-', ax=ax)

    plt.xlim(left=0, right=410)
    plt.ylim(bottom=0)

    plt.xlabel('Throughput (kOp/s)', fontsize=14)
    plt.ylabel('Latency (\u03BCs)', fontsize=14)

    plt.savefig(result_file, bbox_inches='tight')
    plt.close

def generate_throughput_vs_latency_plot__boki_remote_vs_indilog_remote__read(csv_file, result_file):
    df = pd.read_csv(csv_file)
    df_boki = df.loc[df['slog'] == 'boki-remote']
    df_indilog = df.loc[df['slog'] == 'indilog-remote']

    fig = plt.figure()
    ax = plt.subplot(111)

    df_boki.plot.line(x='throughput', y='latency_read_50', label='Boki-Remote Read 0.5', color='royalblue', style='o--', ax=ax)
    df_boki.plot.line(x='throughput', y='latency_read_99', label='Boki-Remote Read 0.99', color='royalblue', style='o-', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_read_50', label='Indilog-Remote (Type 3) Read 0.5', color='lightgreen', style='o--', ax=ax)
    df_indilog.plot.line(x='throughput', y='latency_read_99', label='Indilog-Remote (Type 3) Read 0.99', color='darkgreen', style='o-', ax=ax)

    plt.xlim(left=0)
    plt.ylim(bottom=0)

    plt.xlabel('Throughput (kOp/s)', fontsize=14)
    plt.ylabel('Latency (\u03BCs)', fontsize=14)

    plt.savefig(result_file, bbox_inches='tight')
    plt.close

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--directory', type=str)
    parser.add_argument('--file', type=str)
    parser.add_argument('--slog', type=str)
    parser.add_argument('--exp-duration', type=int)
    parser.add_argument('--interval', type=int)
    parser.add_argument('--filter', type=str, default='')
    parser.add_argument('--throughput', type=float)
    parser.add_argument('--throughput-read', type=float)
    parser.add_argument('--throughput-append', type=float)
    parser.add_argument('--result-file', type=str)
    parser.add_argument('--result-directory', type=str)
    args = parser.parse_args()
    try:
        if args.cmd == 'compute-throughput':
            compute_throughput(args.directory, args.filter, args.exp_duration)
        elif args.cmd == 'concatenate-csv':
            concatenate_csv_files(args.directory, args.filter, args.result_file)
        elif args.cmd == 'add-row':
            add_throughput_latency_row(args.directory, args.slog, args.throughput, args.throughput_append, args.throughput_read, args.result_file)
        elif args.cmd == 'generate-plot-indilog-vs-indilog-min-seqnum-completion-append':
            generate_throughput_vs_latency_plot__indilog_vs_indilog_min_seqnum_completion__append(args.file, args.result_file)
        elif args.cmd == 'generate-plot-indilog-vs-indilog-min-seqnum-completion-read':
            generate_throughput_vs_latency_plot__indilog_vs_indilog_min_seqnum_completion__read(args.file, args.result_file)
        elif args.cmd == 'generate-plot-boki-vs-indilog-append':
            generate_throughput_vs_latency_plot__boki_vs_indilog__append(args.file, args.result_file)
        elif args.cmd == 'generate-plot-boki-vs-indilog-read':
            generate_throughput_vs_latency_plot__boki_vs_indilog__read(args.file, args.result_file)
        elif args.cmd == 'generate-plot-boki-remote-vs-indilog-remote-read':
            generate_throughput_vs_latency_plot__boki_remote_vs_indilog_remote__read(args.file, args.result_file)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)