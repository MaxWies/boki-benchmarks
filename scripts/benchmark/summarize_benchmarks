#!/usr/bin/python3
import os
import sys
import json
import argparse
import subprocess as sp

# TODO: improve
USER_NAME = 'mrc'

def run_remote_command(ssh_ip, cmd):
    print(cmd, file=sys.stderr)
    ret = sp.run(['ssh', '-q', ssh_ip + '-' + USER_NAME, '--'] + cmd,
                 stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8')
    if ret.returncode != 0:
        raise Exception('Failed to run remote command: ' + ' '.join(cmd) + '\n' + ret.stderr)
    return ret.stdout, ret.stderr

def run_remote_copy(ssh_ip, remote_file_path, local_file_path_target):
    cmd = ['scp', ssh_ip + '-' + USER_NAME + ':' + remote_file_path, local_file_path_target]
    print('{}:{}'.format(ssh_ip, cmd), file=sys.stderr)
    ret = sp.run(cmd, stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8')
    if ret.returncode != 0:
        print('Failed to run remote command: ' + ' '.join(cmd) + '\n' + ret.stderr)
    return ret.stdout, ret.stderr

def compute_bucket_percentile(bucket, number_of_entries, percentile):
    bucket_slot_index = 0
    threshold = percentile * number_of_entries
    entries_visited = bucket["slots"][bucket_slot_index]
    while entries_visited < threshold:
        bucket_slot_index += 1
        entries_visited += bucket["slots"][bucket_slot_index]
    return bucket["lower"] + bucket_slot_index * bucket["interval"]

def show_benchmark_results(remote_ip, remote_file_path, local_file_path_target):
    run_remote_copy(remote_ip, remote_file_path, local_file_path_target)
    pretty_benchmark = None
    with open(local_file_path_target) as f:
        benchmark = json.load(f)
        e = sum(benchmark["bucket"]["slots"])
        print("Successful calls {}. Bucket entries {}".format(benchmark["calls_success"], e))
        if "bucket" in benchmark:
            benchmark["latency_median"] = compute_bucket_percentile(benchmark["bucket"], e, 0.5)
            benchmark["latency_p99"] = compute_bucket_percentile(benchmark["bucket"], e, 0.99)
            del benchmark["bucket"]
        pretty_benchmark = json.dumps(benchmark, sort_keys=True, indent=4)
    if pretty_benchmark is None:
        raise Exception
    with open(os.path.join(os.path.dirname(local_file_path_target), "result-pretty")) as f:
        f.write(pretty_benchmark)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--ssh-ip', type=str)
    parser.add_argument('--remote-file-path', type=str)
    parser.add_argument('--local-target-file-path', type=str)
    args = parser.parse_args()
    try:
        os.makedirs(os.path.dirname(args.local_target_file_path), exist_ok=True)
        show_benchmark_results(args.ssh_ip, args.remote_file_path, args.local_target_file_path)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)