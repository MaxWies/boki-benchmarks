#!/usr/bin/python3

import os
import sys
import time
import json
from simplejson import load
import yaml
import random
import string
import argparse
import subprocess as sp

# TODO: improve
USER_NAME = 'mrc'
IP_HOSTNAME_MAP = {}

def random_string(length):
    letters = string.ascii_lowercase
    return ''.join(random.choice(letters) for _ in range(length))

def run_remote_command(ssh_ip, cmd):
    # TODO: improve - do not print to stderr
    print(cmd, file=sys.stderr)
    ret = sp.run(['ssh', '-q', ssh_ip + '-' + USER_NAME, '--'] + cmd,
                 stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8')
    if ret.returncode != 0:
        raise Exception('Failed to run remote command: ' + ' '.join(cmd) + '\n' + ret.stderr)
    return ret.stdout, ret.stderr

def setup_hostname_for_machines(machine_configs):
    for name, machine_config in machine_configs.items():
        if machine_config['role'] != 'dirigent':
            run_remote_command(machine_config['ip'], ['sudo', 'hostnamectl', 'set-hostname', name])
            #TODO: hot fix
            run_remote_command(machine_config['ip'], ['sudo', '/home/mrc/setup/hostname-fix.sh'])

def is_mounted(ip, directory):
    try:
        run_remote_command(ip, ['mountpoint', '-q', directory])
        return True
    except Exception:
        return False

def setup_instance_storage(machine_configs):
    for name, machine_config in machine_configs.items():
        if 'mount_instance_storage' in machine_config:
            ip = machine_configs[name]['ip']
            device = '/dev/' + machine_config['mount_instance_storage']
            directory = '/mnt/storage'
            # TODO: improve mounting code
            if not is_mounted(ip, directory):
                try:
                    run_remote_command(ip, ['sudo', 'mkfs', '-t', 'ext4', device])
                except:
                    pass
                try:
                    run_remote_command(ip, ['sudo', 'mkdir', directory])
                except:
                    pass
                try:
                    run_remote_command(ip, ['sudo', 'mount', '-o', 'defaults,noatime', device, directory])
                except:
                    pass

def docker_swarm_leave(ip):
    try:
        run_remote_command(ip, ['docker', 'swarm', 'leave', '--force'])
    except Exception:
        pass

def setup_docker_swarm_for_machines(machine_configs):
    manager_machine = None
    for name, machine_config in machine_configs.items():
        if machine_config['role'] == 'manager':
            if manager_machine is not None:
                raise Exception('More than one manager machine')
            docker_swarm_leave(machine_config['ip'])
            run_remote_command(
                machine_config['ip'],
                ['docker', 'swarm', 'init', '--advertise-addr', machine_config['ip']])
            time.sleep(10)
            manager_machine = name
            join_token, _ = run_remote_command(
                machine_config['ip'],
                ['docker', 'swarm', 'join-token', '-q', 'worker'])
            join_token = join_token.strip()
            hostname, _ = run_remote_command(machine_config['ip'], ['hostname'])
            IP_HOSTNAME_MAP[machine_config['ip']] = hostname.strip()
    if manager_machine is None:
        raise Exception('No manager machine')
    for name, machine_config in machine_configs.items():
        if machine_config['role'] == 'worker':
            docker_swarm_leave(machine_config['ip'])
            run_remote_command(
                machine_config['ip'],
                ['docker', 'swarm', 'join', '--token', join_token,
                 machine_configs[manager_machine]['ip']+':2377'])
            hostname, _ = run_remote_command(machine_config['ip'], ['hostname'])
            IP_HOSTNAME_MAP[machine_config['ip']] = hostname.strip()
    time.sleep(10)
    for name, machine_config in machine_configs.items():
        if 'labels' in machine_config:
            cmd = ['docker', 'node', 'update']
            for label_str in machine_config['labels']:
                cmd.extend(['--label-add', label_str])
            cmd.append(IP_HOSTNAME_MAP[machine_config['ip']])
            run_remote_command(machine_configs[manager_machine]['ip'], cmd)

def start_machines_main(base_dir):
    machine_config_file = 'config.json'
    if not os.path.exists(os.path.join(base_dir, machine_config_file)):
        raise Exception('Could not find file {}!'.format(machine_config_file))
    with open(os.path.join(base_dir, machine_config_file)) as fin:
        config = json.load(fin)
    try:
        start_time = time.time()
        setup_hostname_for_machines(config['machines'])
        setup_instance_storage(config['machines'])
        setup_docker_swarm_for_machines(config['machines'])
        elapsed = time.time() - start_time
        print('Finish setup in %.3f seconds' % (elapsed,))
    except Exception as e:
        raise e

def generate_docker_compose_main(base_dir):
    config = load_config_file(base_dir)
    docker_compose = { 'version': '3.8', 'services': {} }
    for name, service_config in config['services'].items():
        docker_compose['services'][name] = { 'deploy': {} }
        service_docker_compose = docker_compose['services'][name]
        service_docker_compose['deploy']['replicas'] = service_config.get('replicas', 1)
        if 'placement' in service_config:
            service_docker_compose['deploy']['placement'] = {
                'constraints': ['node.hostname == %s' % (service_config['placement'],)]
            }
        elif 'placement_label' in service_config:
            service_docker_compose['deploy']['placement'] = {
                'constraints': ['node.labels.%s == true' % (service_config['placement_label'],)],
                'max_replicas_per_node': 1
            }
        service_docker_compose['environment'] = []
        service_docker_compose['volumes'] = []
        if 'need_aws_env' in service_config and service_config['need_aws_env']:
            if 'aws_access_key_id' in config:
                service_docker_compose['environment'].append(
                    'AWS_ACCESS_KEY_ID=%s' % (config['aws_access_key_id'],))
            if 'aws_secret_access_key' in config:
                service_docker_compose['environment'].append(
                    'AWS_SECRET_ACCESS_KEY=%s' % (config['aws_secret_access_key'],))
            if 'aws_region' in config:
                service_docker_compose['environment'].append(
                    'AWS_REGION=%s' % (config['aws_region'],))
        if 'mount_certs' in service_config and service_config['mount_certs']:
            service_docker_compose['volumes'].append(
                '/etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt')
    with open(os.path.join(base_dir, 'docker-compose-generated.yml'), 'w') as fout:
        yaml.dump(docker_compose, fout, default_flow_style=False)

def load_config_file(base_dir):
    config_file = 'config.json'
    if not os.path.exists(os.path.join(base_dir, config_file)):
        raise Exception('Could not find file {}!'.format(config_file))
    with open(os.path.join(base_dir, config_file)) as fin:
        config = json.load(fin)
    return config

def get_host_main(base_dir, machine_name):
    print(load_config_file(base_dir)['machines'][machine_name]['ip'])

def get_service_host_main(base_dir, service_name):
    config = load_config_file(base_dir)
    machine = config['services'][service_name]['placement']
    print(config['machines'][machine]['ip'])

def get_docker_manager_host_main(base_dir):
    for machine_info in load_config_file(base_dir)['machines'].values():
        if machine_info['role'] == 'manager':
            print(machine_info['ip'] + '-' + USER_NAME)
            break
    
def get_client_host_main(base_dir):
    for machine_info in load_config_file(base_dir)['machines'].values():
        if machine_info['role'] == 'client':
            print(machine_info['ip'] + '-' + USER_NAME)
            break

def get_all_server_hosts_main(base_dir):
    for machine_info in load_config_file(base_dir)['machines'].values():
        if machine_info['role'] != 'client':
            print(machine_info['ip'] + '-' + USER_NAME)

def get_machine_with_label_main(base_dir, label):
    for machine_info in load_config_file(base_dir)['machines'].values():
        if 'labels' in machine_info:
            labels = machine_info['labels']
            if label in labels or label+'=true' in labels:
                print(machine_info['ip'] + '-' + USER_NAME)

def get_client_with_merged_results(base_dir):
    label = 'merged_results=true'
    for machine_info in load_config_file(base_dir)['machines'].values():
        if machine_info['role'] == 'client':
            labels = machine_info['labels']
            if label in labels:
                print(machine_info['ip'] + '-' + USER_NAME)
                return
    print('Warning: No client with label {}'.format(label))

def get_container_id_main(base_dir, service_name, machine_name, machine_host):
    machine_infos = load_config_file(base_dir)['machines'].values()    
    if machine_host is None:
        if machine_name is None:
            machine_name = load_config_file(base_dir)['services'][service_name]['placement']
        machine_host = machine_infos[machine_name]['ip']
    #TODO: improve
    machine_host = machine_host.replace('-'+USER_NAME,'')
    short_id, _ = run_remote_command(machine_host,
                                     ['docker', 'ps', '-q', '-f', 'name='+service_name])
    short_id = short_id.strip()
    if short_id != '':
        container_info, _ = run_remote_command(machine_host, ['docker', 'inspect', short_id])
        container_info = json.loads(container_info)[0]
        print(container_info['Id'])

def collect_container_logs_main(base_dir, log_path):
    if not os.path.isdir(log_path):
        os.mkdir(log_path)
    for machine_info in load_config_file(base_dir)['machines'].values():
        if machine_info['role'] == 'client':
            continue
        container_ids, _ = run_remote_command(machine_info['ip'], ['docker', 'ps', '-q'])
        container_ids = container_ids.strip().split()
        for container_id in container_ids:
            container_info, _ = run_remote_command(
                machine_info['ip'], ['docker', 'inspect', container_id])
            container_info = json.loads(container_info)[0]
            container_name = container_info['Name'][1:]  # remove prefix '/'
            log_stdout, log_stderr = run_remote_command(
                machine_info['ip'], ['docker', 'container', 'logs', container_id])
            with open(os.path.join(log_path, '%s.stdout' % container_name), 'w') as fout:
                fout.write(log_stdout)
            with open(os.path.join(log_path, '%s.stderr' % container_name), 'w') as fout:
                fout.write(log_stderr)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--base-dir', type=str, default='.')
    parser.add_argument('--machine-name', type=str, default=None)
    parser.add_argument('--machine-label', type=str, default=None)
    parser.add_argument('--machine-host', type=str, default=None)
    parser.add_argument('--service', type=str, default=None)
    parser.add_argument('--log-path', type=str, default=None)
    args = parser.parse_args()
    try:
        if args.cmd == 'start-machines':
            start_machines_main(args.base_dir)
        # elif args.cmd == 'stop-machines':
        #     stop_machines_main(args.base_dir)
        elif args.cmd == 'generate-docker-compose':
            generate_docker_compose_main(args.base_dir)
        elif args.cmd == 'get-host':
            get_host_main(args.base_dir, args.machine_name)
        elif args.cmd == 'get-service-host':
            get_service_host_main(args.base_dir, args.service)
        elif args.cmd == 'get-docker-manager-host':
            get_docker_manager_host_main(args.base_dir)
        elif args.cmd == 'get-client-host':
            get_client_host_main(args.base_dir)
        elif args.cmd == 'get-all-server-hosts':
            get_all_server_hosts_main(args.base_dir)
        elif args.cmd == 'get-machine-with-label':
            get_machine_with_label_main(args.base_dir, args.machine_label)
        elif args.cmd == 'get-client-with-merged-results':
            get_client_with_merged_results(args.base_dir, args.machine_label)
        elif args.cmd == 'get-container-id':
            get_container_id_main(args.base_dir, args.service, args.machine_name, args.machine_host)
        elif args.cmd == 'collect-container-logs':
            collect_container_logs_main(args.base_dir, args.log_path)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)
