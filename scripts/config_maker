#!/usr/bin/python3

import argparse
import os
import sys
import yaml
import json
import copy
import subprocess as sp
        
def load_json_file(file):
    if not os.path.exists(file):
        raise Exception('Could not find file {}!'.format(file))
    with open(file) as f:
        s = json.load(f)
    return s

def create_name_with_id(func_name, func_id):
    return '{}-{}'.format(func_name, str(func_id))

# def create_service_name(func_dic, func_id):
#     if func_dic["instances"] <= 1:
#         return func_dic["service_name"]
#     else :
#         return '{}-{}'.format(func_dic["service_name"], str(func_id))

# def create_function_name(func_dic, func_id):
#     if func_dic["instances"] <= 1:
#         return func_dic["function_name"]
#     else :
#         return '{}-{}'.format(func_dic["function_name"], str(func_id))

def create_service_from_function_spec(func_dic, func_id):
    service_name = create_service_name(func_dic, func_id)
    service_desc = copy.deepcopy(func_dic["docker"])
    service_desc["entrypoint"].append(str(func_id))
    return service_name, service_desc

def generate_docker_compose_with_applications():
    pass

def generate_docker_compose_application_less(base_dir, compose_file):
    function_definitions = load_json_file(os.path.join(base_dir, 'functions.json'))
    func_id = 0
    for _, function_value in function_definitions['functions'].items():
        func_id += 1
        service_desc = copy.deepcopy(function_value["docker"])
        service_desc["entrypoint"].append(str(func_id))
        compose_file['services'][function_value['service_name']] = service_desc

def generate_docker_compose_file(base_dir, slog_spec, exp_spec):
    with open(os.path.join(base_dir, 'docker-compose-main.yml')) as f:
        compose_file = yaml.safe_load(f)
    compose_file['services']['slog-controller'] = slog_spec['slog_controller']
    if 'applications' in exp_spec.keys():
        generate_docker_compose_with_applications()
    else:
        generate_docker_compose_application_less(base_dir, compose_file)
    # id_counter = 0
    # for application in spec['applications']:
    #     for _ in range(application['instances']):
    #         for f in application["functions"]:
    #             id_counter += 1
    #             service_name, service_desc = create_service_from_function_spec(f ,id_counter)
    #             compose_file['services'][service_name] = service_desc
    with open(os.path.join(base_dir, "docker-compose.yml"), 'w') as f:
        yaml.dump(compose_file, f, default_flow_style=False, sort_keys=False)

def generate_nightcore_config_with_applications():
    pass

def generate_nightcore_config_application_less(base_dir, exp_spec):
    func_id = 0
    nc_config = []
    for key, value in exp_spec['functions'].items():
        func_id += 1
        nc_config.append({
            "funcName": key,
            "funcId": func_id,
            "minWorkers": value["concurrency"],
            "maxWorkers": value["concurrency"]
        })
    nc_config = json.dumps(nc_config, indent=2)
    with open(os.path.join(base_dir, "nightcore_config.json"), 'w') as f:
        f.write(nc_config)

def generate_nightcore_config(base_dir, exp_spec):
    if 'applications' in exp_spec.keys():
        generate_nightcore_config_with_applications()
    else:
        generate_nightcore_config_application_less(base_dir, exp_spec)
    # nc_config = []
    # id_counter = 0
    # slogspace_counter = 0
    # for application in exp_file['applications']:
    #     if application['instances'] == 1:
    #         for function in application['functions']:
    #             nc_config.append({
    #                 "funcName": create_function_name(f, id_counter),
    #                 "funcId": id_counter,
    #                 "defaultLogSpace": slogspace_counter,
    #                 "minWorkers": f["min_workers"],
    #                 "maxWorkers": f["max_workers"]
    #             })
    #     #unique
    #     for i in range(application['instances']):
    #         slogspace_counter += 1
    #         for f in application["functions"]:
    #             id_counter += 1
    #             nc_config.append({
    #                 "funcName": create_function_name(f, id_counter),
    #                 "funcId": id_counter,
    #                 "defaultLogSpace": slogspace_counter,
    #                 "minWorkers": f["min_workers"],
    #                 "maxWorkers": f["max_workers"]
    #             })
    # nc_config = json.dumps(nc_config, indent=2)
    # with open(os.path.join(base_dir, "nightcore_config.json"), 'w') as f:
    #     f.write(nc_config)

def generate_swarm_with_applications():
    pass

def generate_swarm_application_less(base_dir, config, slog, slog_spec, exp_spec):
    function_definitions = load_json_file(os.path.join(base_dir, 'functions.json'))
    if slog.to_lower() == 'indilog':
        for key, _ in exp_spec['functions'].items():
            config["services"][function_definitions['functions'][key]['service_name']] = {
                    "placement_label": "engine_node",
                    "replicas": slog_spec['slog_engine_replicas_init']
            }
    elif slog.to_lower() == 'boki':
        for key, _ in exp_spec['functions'].items():
                config["services"][function_definitions['functions'][key]['service_name']] = {
                        "placement_label": "engine_node",
                        "replicas": slog_spec['slog_engine_replicas']
                }

def generate_swarm_config_engines(config, slog, slog_spec):
    if slog.to_lower() == 'indilog':
        config["services"]["slog-engine"] = { 
            "placement_label": "engine_node", 
            "replicas": slog_spec['slog_engine_replicas_init'] 
        }
        if "slog_index_engine_replicas" in slog_spec.keys():
            config["services"]["slog-index-engine"] = { 
                "placement_label": "index_engine_node", 
                "replicas": slog_spec['slog_index_engine_replicas']
            }
    elif slog.to_lower() == 'boki':
        config["services"]["slog-engine"] = { 
            "placement_label": "engine_node", 
            "replicas": slog_spec['slog_engine_replicas'] 
        }
    else:
        raise Exception("Unknown shared log")


def generate_swarm_config(base_dir, slog, slog_spec, exp_spec):
    config = {}
    #config["services"] = spec["services"]
    config["services"] = {
        "zookeeper": { "placement": "slogexp-gateway" },
        "zookeeper-setup": { "placement": "slogexp-gateway" },
        "slog-controller": { "placement": "slogexp-gateway" },
        "slog-gateway": { "placement": "slogexp-gateway" },
        "slog-storage": { "placement_label": "storage_node", "replicas": slog_spec['slog_storage_replicas'] },
        "slog-sequencer": { "placement_label": "sequencer_node", "replicas": slog_spec['slog_sequencers_replicas'] },
        "slog-index": { "placement_label": "index_node", "replicas": slog_spec['slog_index_shards'] * slog_spec['slog_index_replicas'] }
    }
    generate_swarm_config_engines(config, slog, slog_spec)
    if 'applications' in exp_spec.keys():
        generate_swarm_with_applications()
    else:
        generate_swarm_application_less(base_dir, config, slog, slog_spec, exp_spec)

    # for application in exp_file['applications']:
    #     id_counter = 0
    #     if application['instances'] == 1:
    #         # unique
    #         for function in application['functions']:
    #             config["services"][function] = {
    #                 "placement_label": f["placement_label"],
    #                 "replicas": f["replicas"]
    #             }
    #     else:
    #         for i in range(application['instances']):
    #             id_counter += 1
    #             for function in application['functions']:
    #                 config["services"][create_name_with_id(function, id_counter)] = {
    #                     "placement_label": f["placement_label"],
    #                     "replicas": f["replicas"]
    # for application in spec['applications']:
    #     for i in range(application['instances']):
    #         for f in application["functions"]:
    #             id_counter += 1
    #             config["services"][create_service_name(f, id_counter)] = {
    #                 "placement_label": f["placement_label"],
    #                 "replicas": f["replicas"]
                # }
    config = json.dumps(config, indent=2)
    with open(os.path.join(base_dir, "config.json"), 'w') as f:
        f.write(config)

def generate_runtime_config(base_dir, slog, slog_file, exp_file):
    slog_spec = load_json_file(slog_file)
    exp_spec = load_json_file(exp_file)
    generate_swarm_config(base_dir, slog, slog_spec, exp_spec)
    generate_nightcore_config(base_dir, exp_spec)
    generate_docker_compose_file(base_dir, slog_spec, exp_spec)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--base-dir', type=str, default='.')
    parser.add_argument('--slog', type=str, default='indilog')
    parser.add_argument('--slog-spec-file', type=str, default=None)
    parser.add_argument('--exp-spec-file', type=str, default=None)
    args = parser.parse_args()
    try:
        if args.cmd == 'generate-runtime-config':
            generate_runtime_config(args.base_dir, args.slog, args.slog_spec_file, args.exp_spec_file)
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)