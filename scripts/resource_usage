#!/usr/bin/python3

import os
import sys
import argparse
import subprocess as sp
import csv
import math

USER_NAME = 'mrc'

def run_remote_command(ssh_ip, cmd):
    print(cmd, file=sys.stderr)
    ret = sp.run(['ssh', ssh_ip + '-' + USER_NAME, '--'] + cmd,
                 stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8')
    if ret.returncode != 0:
        raise Exception('Failed to run remote command: ' + ' '.join(cmd) + '\n' + ret.stderr)
    return ret.stdout, ret.stderr

def run_remote_copy(ssh_ip, target_file_remote, target_file_local):
    ret = sp.run(
        ['scp', '-q', ssh_ip + '-' + USER_NAME, '--', target_file_remote, target_file_local],
        stdout=sp.PIPE, stderr=sp.PIPE, encoding='utf8'
    )

def sample_resource_usage(ip, script, process_name, sample_rate, samples, log_path, log_file_name):
    log_file_remote = os.path.join(log_path, log_file_name)
    log_file_local = os.path.join('/tmp', log_file_name)
    run_remote_command(ip, [script, process_name, str(sample_rate), str(samples), log_file_remote])
    run_remote_copy(ip, log_file_remote, log_file_local)
    cpu_min = sys.maxsize
    cpu_max = 0
    mem_sta = -1
    mem_end = 0
    cpu_agg = 0
    entries = 0
    with open(log_file_local, newline='') as csv_file:
        reader = csv.reader(csv_file, delimiter=',')
        for row in reader:                
            cpu = row[4]
            mem = row[5]
            cpu_min = min(cpu_min, cpu)
            cpu_max = max(cpu_max, cpu)
            cpu_agg += cpu
            if mem_sta < 0:
                mem_sta = mem
            mem_end = mem
            entries += 1
    cpu_avg = math.round(cpu_agg / entries, 2)
    mem_dif = mem_end - mem_sta
    print("CPU_MIN: {}\nCPU_MAX: {}\nCPU_AVG: {}\nMEM_STA: {}\nMEM_END: {}\nMEM_DIF: {}".format(
        str(cpu_min), str(cpu_max), str(cpu_avg), str(mem_sta), str(mem_end), str(mem_dif)
    ))

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('cmd', type=str)
    parser.add_argument('--ip', type=str)
    parser.add_argument('--resource-usage-script', type=str, default='/home/{}/resource_usage.sh'.format(USER_NAME))
    parser.add_argument('--sample-rate', type=int, default=2)
    parser.add_argument('--samples', type=int, default=100)
    parser.add_argument('--process-name', type=str)
    #parser.add_argument('--log-file', type=str, default='resource_usage.txt')
    parser.add_argument('--log-path', type=str, default='/tmp')
    args = parser.parse_args()
    try:
        if args.cmd == 'sample-resource-usage':
            log_file_name = 'resource_usage_{}.csv'.format(args.process_name)
            sample_resource_usage(
                args.ip, args.resource_usage_script, args.process_name, 
                args.sample_rate, args.samples, args.log_path, log_file_name
            )
        else:
            raise Exception('Unknown command: ' + args.cmd)
    except Exception as e:
        err_str = str(e)
        if not err_str.endswith('\n'):
            err_str += '\n'
        sys.stderr.write(err_str)
        sys.exit(1)
